/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, WithoutDto as PrismaWithoutDto } from "@prisma/client";

export class WithoutDtoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WithoutDtoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.withoutDto.count(args);
  }

  async withoutDtos<T extends Prisma.WithoutDtoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WithoutDtoFindManyArgs>
  ): Promise<PrismaWithoutDto[]> {
    return this.prisma.withoutDto.findMany<Prisma.WithoutDtoFindManyArgs>(args);
  }
  async withoutDto<T extends Prisma.WithoutDtoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WithoutDtoFindUniqueArgs>
  ): Promise<PrismaWithoutDto | null> {
    return this.prisma.withoutDto.findUnique(args);
  }
  async createWithoutDto<T extends Prisma.WithoutDtoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WithoutDtoCreateArgs>
  ): Promise<PrismaWithoutDto> {
    return this.prisma.withoutDto.create<T>(args);
  }
  async updateWithoutDto<T extends Prisma.WithoutDtoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WithoutDtoUpdateArgs>
  ): Promise<PrismaWithoutDto> {
    return this.prisma.withoutDto.update<T>(args);
  }
  async deleteWithoutDto<T extends Prisma.WithoutDtoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WithoutDtoDeleteArgs>
  ): Promise<PrismaWithoutDto> {
    return this.prisma.withoutDto.delete(args);
  }
}
